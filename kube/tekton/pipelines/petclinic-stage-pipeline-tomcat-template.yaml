
apiVersion: v1
kind: Template
metadata:
  name: pipeline-stage-template
  annotations:
    openshift.io/display-name: "Staging Pipeline Template"
    description: >-
      Creates an apache server to act as a proxy to turn insecure https into http (with a bearer token)
    tags: "monitoring"
    iconClass: "fa fa-exchange"
message: "Creating staging pipeline in $PROJECT_NAME"
parameters:
- description: The name of the project the pipeline will be installed to
  displayName: Name of CI/CD project
  name: PROJECT_NAME
  value: petclinic-cicd
  required: true
- description: The name of the staging project
  displayName: Staging Project
  name: STAGING_PROJECT
  value: petclinic-stage
  required: true
- description: The name of the development project
  displayName: Development Project
  name: DEVELOPMENT_PROJECT
  value: petclinic-dev
  required: true
- description: The name of the cicd project
  displayName: CICD Project
  name: CICD_PROJECT
  value: petclinic-cicd
- description: The name of the staging application (or image stream)
  displayName: Application Name (Staging)
  name: APP_NAME
  value: petclinic
- description: The name of the development application (or image stream)
  displayName: Application Name (Dev)
  name: DEV_APP_NAME
  value: petclinic
objects:
- apiVersion: tekton.dev/v1alpha1
  kind: Pipeline
  metadata:
    name: petclinic-deploy-stage-tomcat
    namespace: ${PROJECT_NAME}
  spec:
    workspaces:
    - name: local-config-source
    resources:
      - name: app-image
        type: image
    params:
      - name: IMAGE_TAG
        default: latest 
        type: string
        description: The image tag to be promoted from DEV to STAGE environment
      - name: ARGO_CD_BRANCH
        default: uat
        type: string
        description: The branch that ARGO CD is monitoring for gitops deployment
    tasks:
    - name: promote-stage
      taskRef:
        name: openshift-client
      params:
      - name: COMMANDS
        value: |
            set -e -o pipefail
            echo "Tagging image as the current stage image"
            oc tag ${CICD_PROJECT}/${DEV_APP_NAME}:$(params.IMAGE_TAG) ${STAGING_PROJECT}/${APP_NAME}:stage

            echo "Deploying latest image of ${APP_NAME} to ${STAGING_PROJECT}"
            # NOTE: When setting container images, you need to specify the image in docker format and not by image stream
            DOCKER_IMAGE="`oc get is/${APP_NAME} -o jsonpath='{.status.dockerImageRepository}' -n ${STAGING_PROJECT}`:stage"
            oc set image deploy/${APP_NAME} ${APP_NAME}="${DOCKER_IMAGE}" -n ${STAGING_PROJECT}
            oc set env deploy/${APP_NAME} VERSION="$(params.IMAGE_TAG) (petclinic-stage)" -n ${STAGING_PROJECT}

            echo "Waiting for deployment to complete"
            oc rollout status deploy/${APP_NAME} -n ${STAGING_PROJECT}
    - name: checkout-config
      taskRef: 
        name: git-clone
      workspaces:
      - name: output
        workspace: local-config-source
      params:
      - name: url
        value: 'http://gitea.petclinic-cicd:3000/gogs/petclinic-config.git'
      - name: revision
        value: $(params.ARGO_CD_BRANCH)
      - name: deleteExisting
        value: "true"
      - name: subdirectory
        value: ""
    - name: patch-config
      taskRef: 
        name: update-config
      runAfter:
      - checkout-config
      workspaces:
      - name: input
        workspace: local-config-source
      resources:
        inputs:
        - name: app-image
          resource: app-image 
      params:
      - name: IMAGE_TAG
        value: $(params.IMAGE_TAG)
      - name: PATH_CONTEXT
        value: "."
      - name: PATCH_FILE
        value: "app/deployment.yaml"
      - name: GIT_SECRET_NAME
        value: "gitea-secret"
      - name: BRANCH_SUFFIX
        value: $(params.IMAGE_TAG)
    - name: create-pull-request
      taskRef:
        name: create-pull-request
      runAfter:
        - patch-config
      params:
      - name: GIT_REPO_NAME
        value: 'gogs/petclinic-config'
      - name: SOURCE_BRANCH
        value: $(tasks.patch-config.results.branch-name)
      - name: TARGET_BRANCH
        value: $(params.ARGO_CD_BRANCH)
      - name: GIT_SECRET_NAME
        value: 'gitea-secret'
      
