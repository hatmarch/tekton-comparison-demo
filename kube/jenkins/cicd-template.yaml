apiVersion: v1
kind: Template
labels:
  template: cicd
  group: cicd
metadata:
  annotations:
    iconClass: icon-jenkins
    tags: instant-app,jenkins,gogs,nexus,cicd
  name: cicd
message: "Use the following credentials for login:\nJenkins: use your OpenShift credentials\nNexus: admin/admin123\nSonarQube: admin/admin\nGogs Git Server: gogs/gogs"
parameters:
- displayName: DEV project name
  value: dev
  name: DEV_PROJECT
  required: true
- displayName: STAGE project name
  value: stage
  name: STAGE_PROJECT
  required: true
- displayName: Deploy Eclipse Che
  description: Deploy Eclipse Che in order to use as an online IDE for changing code in this demo
  value: "false"
  name: DEPLOY_CHE
  required: true
- displayName: Ephemeral
  description: Use no persistent storage for Gogs and Nexus
  value: "true"
  name: EPHEMERAL
  required: true
- description: Webhook secret
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: WEBHOOK_SECRET
  required: true
- description: Jenkins Gogs Repo name
  name: GOGS_REPO_NAME
  value: "petclinic-jenkins"
  required: true
- displayName: Integrate Quay.io
  description: Integrate image build and deployment with Quay.io 
  value: "false"
  name: ENABLE_QUAY
  required: true
- displayName: Quay.io Username
  description: Quay.io username to push the images to petclinic-sample-app repository on your Quay.io account
  name: QUAY_USERNAME
- displayName: Quay.io Password
  description: Quay.io password to push the images to petclinic-sample-app repository on your Quay.io account
  name: QUAY_PASSWORD
- displayName: Quay.io Image Repository
  description: Quay.io repository for pushing Petclinic container images
  name: QUAY_REPOSITORY
  required: true
  value: petclinic-app
objects:
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_admin
  roleRef:
    name: admin
  subjects:
  - kind: ServiceAccount
    name: default
# Pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: petclinic-pipeline
  spec:
    triggers:
      - type: GitHub
        github:
          secret: ${WEBHOOK_SECRET}
      - type: Generic
        generic:
          secret: ${WEBHOOK_SECRET}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: DEV_PROJECT
          value: ${DEV_PROJECT}
        - name: STAGE_PROJECT
          value: ${STAGE_PROJECT}
        - name: ENABLE_QUAY
          value: ${ENABLE_QUAY}
        jenkinsfile: |-
          def mvnCmd = "mvn -s /var/config/settings.xml"

          pipeline {
            agent {
              label 'maven'
            }

            environment {
              // Tags
              devTag      = "0.0-0"

              sonarQubeUrl = "http://sonarqube:9000"

              imageName = "petclinic"
              imageStreamService = "image-registry.openshift-image-registry.svc:5000"
            }

            stages {
              stage('Checkout') {
                steps {
                  sh "rm -rf /tmp/build-app"
                  git branch: 'spring-5.2.0', url: 'http://gogs:3000/gogs/${GOGS_REPO_NAME}.git'
                }
              }

              stage('Set Build Version') {
                steps {
                  script {
                    // Create a tag for the build
                    def pom = readMavenPom file: 'pom.xml'
                    def version = pom.version
                    // Set the tag for the development image: version + build number
                    devTag  = "${version}-" + currentBuild.number
                  }
                  
                  // First set the version as the devTag in the pom
                  sh "${mvnCmd} versions:set -DnewVersion=${devTag}"
                }
              }

              stage('Build App') {
                steps {
                  sh "${mvnCmd} install -DskipTests=true"

                  sh "mkdir -p /tmp/build-app && cp target/ROOT.war /tmp/build-app/ROOT.war"
                }
              }
              
              stage('Analysis and Test') {
                parallel {
                  stage('Test') {
                    steps {
                      sh "${mvnCmd} test"
                      step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                    }
                  }
                  stage('Code Analysis') {
                    steps {
                      script {
                        sh "${mvnCmd} install -DskipTests=true"

                        // Execute Sonarqube Tests
                        // NOTE: other directives that can be used -Dsonar.projectKey=${JOB_BASE_NAME}-${devTag}
                        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${sonarQubeUrl} -Dsonar.projectName='Spring Framework Petclinic' -DskipTests=true"
                      }
                    }
                  }
                 } 
               }
  
              stage('Build and Release') {
                parallel {
                  stage('Release App') {
                    steps {
                      sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus:8081/repository/maven-releases/ -DaltSnapshotDeploymentRepository=nexus::default::http://nexus:8081/repository/maven-snapshots/"
                    }
                  }
                
                  stage('Build And Tag Image') {
                    steps {
                      // NOTE: image should already be called ROOT.war
                      // sh "cp target/openshift-tasks.war target/ROOT.war"
                      script {
                        openshift.withCluster() {
                          openshift.withProject(env.DEV_PROJECT) {
                            // NOTE that we are deploying a .war file we built in the first step and stored separately to 
                            // keep other maven operations from affecting it      
                            openshift.selector("bc", "petclinic").startBuild("--from-file=/tmp/build-app/ROOT.war", "--wait=true")

                            def tagResult = openshift.tag("${imageName}:latest", "${imageName}:${devTag}");
                            echo "Result of image tagging:\n ${tagResult.actions[0].out} ${tagResult.actions[0].err}"
                          }
                        }
                      }
                    }
                  }
                }
              }
              
              stage('Deploy DEV') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        // set the image on the deployment
                        devImageName = "${imageStreamService}/${env.DEV_PROJECT}/${imageName}:${devTag}"
                        openshift.set("image", "deploy/petclinic", "petclinic=${devImageName}")
        
                        // set the VERSION env variable on the deployment
                        openshift.set("env", "deploy/petclinic", "VERSION='${devTag} (${env.DEV_PROJECT})'")

                        // The deployment should already be rolling out with the image change
                        openshift.raw("rollout status deploy/petclinic")
                      }
                    }
                  }
                }
              }
  
              stage('Promote to STAGE?') {
                agent {
                  label 'skopeo'
                }
                steps {
                  timeout(time:15, unit:'MINUTES') {
                      input message: "Promote to STAGE?", ok: "Promote"
                  }
  
                  script {
                    openshift.withCluster() {
                      if (env.ENABLE_QUAY.toBoolean()) {
                        withCredentials([usernamePassword(credentialsId: "${openshift.project()}-quay-cicd-secret", usernameVariable: "QUAY_USER", passwordVariable: "QUAY_PWD")]) {
                          sh "skopeo copy docker://quay.io/${QUAY_USERNAME}/${QUAY_REPOSITORY}:latest docker://quay.io/${QUAY_USERNAME}/${QUAY_REPOSITORY}:stage --src-creds \"$QUAY_USER:$QUAY_PWD\" --dest-creds \"$QUAY_USER:$QUAY_PWD\" --src-tls-verify=false --dest-tls-verify=false"
                        }
                      } else {
                        openshift.tag("${env.DEV_PROJECT}/${imageName}:${devTag}", "${env.STAGE_PROJECT}/petclinic:stage")
                      }
                    }
                  }
                }
              }
              stage('Deploy STAGE') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.STAGE_PROJECT) {
                        openshift.set("image", "deploy/petclinic", "petclinic=${imageStreamService}/${env.STAGE_PROJECT}/petclinic:stage")
        
                        // set the VERSION env variable on the deployment
                        openshift.set("env", "deploy/petclinic", "VERSION='${devTag} (${env.STAGE_PROJECT})'")

                        // The deployment should already be rolling out with the image change
                        openshift.raw("rollout status deploy/petclinic")
                      }
                    }
                  }
                }
              }
            }
          }  
      type: JenkinsPipeline
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: cicd-pipeline
      role: jenkins-slave
    name: jenkins-slaves
  data:
    maven-template: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>maven</name>
        <privileged>false</privileged>
        <alwaysPullImage>false</alwaysPullImage>
        <instanceCap>2147483647</instanceCap>
        <idleMinutes>0</idleMinutes>
        <label>maven</label>
        <serviceAccount>jenkins</serviceAccount>
        <nodeSelector></nodeSelector>
        <customWorkspaceVolumeEnabled>false</customWorkspaceVolumeEnabled>
        <workspaceVolume class="org.csanchez.jenkins.plugins.kubernetes.volumes.workspace.EmptyDirWorkspaceVolume">
          <memory>false</memory>
        </workspaceVolume>
        <volumes>
            <org.csanchez.jenkins.plugins.kubernetes.volumes.ConfigMapVolume>
                <mountPath>/var/config</mountPath>
                <configMapName>custom-maven-settings</configMapName>
            </org.csanchez.jenkins.plugins.kubernetes.volumes.ConfigMapVolume>
        </volumes>
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>quay.io/mhildenb/jenkins-maven-agent:1.0</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/tmp</workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <resourceRequestCpu>200m</resourceRequestCpu>
            <resourceRequestMemory>512Mi</resourceRequestMemory>
            <resourceLimitCpu>2</resourceLimitCpu>
            <resourceLimitMemory>4Gi</resourceLimitMemory>
            <envVars/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
    skopeo-template: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>skopeo</name>
        <privileged>false</privileged>
        <alwaysPullImage>false</alwaysPullImage>
        <instanceCap>2147483647</instanceCap>
        <idleMinutes>0</idleMinutes>
        <label>skopeo</label>
        <serviceAccount>jenkins</serviceAccount>
        <nodeSelector></nodeSelector>
        <customWorkspaceVolumeEnabled>false</customWorkspaceVolumeEnabled>
        <workspaceVolume class="org.csanchez.jenkins.plugins.kubernetes.volumes.workspace.EmptyDirWorkspaceVolume">
          <memory>false</memory>
        </workspaceVolume>
        <volumes />
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>docker.io/siamaksade/jenkins-slave-skopeo-centos7</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/tmp</workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <envVars/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
# Setup Demo
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: cicd-demo-installer
  spec:
    activeDeadlineSeconds: 400
    completions: 1
    parallelism: 1
    template:
      spec:
        containers:
        - env:
          - name: CICD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          command:
          - /bin/bash
          - -x
          - -c
          - |           
            # adjust jenkins 
            oc set resources dc/jenkins --limits=cpu=2,memory=2Gi --requests=cpu=100m,memory=512Mi 
            oc label dc jenkins app=jenkins --overwrite 
            
            # dev project
            # oc expose dc/petclinic --port=8080 -n ${DEV_PROJECT}
            # oc expose svc/petclinic -n ${DEV_PROJECT}
            # enable java debugging
            oc set env deploy/petclinic -n ${DEV_PROJECT} -e"JAVA_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,address=5000,server=y,suspend=n"
            # FIXME: Add Health Checks
            # oc set probe dc/tasks --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=9 -n ${DEV_PROJECT}
            # oc set probe dc/tasks --liveness  --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=9 -n ${DEV_PROJECT}
            # oc rollout cancel dc/petclinic -n ${STAGE_PROJECT}

            # stage project
            # oc expose dc/petclinic --port=8080 -n ${STAGE_PROJECT}
            # oc expose svc/petclinic -n ${STAGE_PROJECT}
            # FIXME: Add Health Checks
            # oc set probe dc/tasks --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10 -n ${STAGE_PROJECT}
            # oc set probe dc/tasks --liveness  --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10 -n ${STAGE_PROJECT}
            # oc rollout cancel dc/petclinic -n ${DEV_PROJECT}

            # # deploy gogs (FIXME: Only if necessary)
            # HOSTNAME=$(oc get route jenkins -o template --template='{{.spec.host}}' | sed "s/jenkins-${CICD_NAMESPACE}.//g")
            # GOGS_HOSTNAME="gogs-$CICD_NAMESPACE.$HOSTNAME"

            # if [ "${EPHEMERAL}" == "true" ] ; then
            # curl -s https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-template.yaml|sed 's#sql\:9.5#sql\:9.6#g'| oc new-app -f - \
            #       --param=GOGS_VERSION=0.11.34 \
            #       --param=HOSTNAME=$GOGS_HOSTNAME \
            #       --param=SKIP_TLS_VERIFY=true \
            #       --param=DATABASE_VERSION=latest
            # else
            # curl -s https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-persistent-template.yaml |sed 's#sql\:9.5#sql\:9.6#g'| oc new-app -f - \
            #       --param=GOGS_VERSION=0.11.34 \
            #       --param=HOSTNAME=$GOGS_HOSTNAME \
            #       --param=SKIP_TLS_VERIFY=true \
            #       --param=DATABASE_VERSION=latest
            # fi
            
            # sleep 5

            # FIXME: Only deploy sonarqube if necessary
            # if [ "${EPHEMERAL}" == "true" ] ; then
            #   oc new-app -f https://raw.githubusercontent.com/siamaksade/sonarqube/master/sonarqube-template.yml --param=SONARQUBE_MEMORY_LIMIT=6Gi
            # else
            #   oc new-app -f https://raw.githubusercontent.com/siamaksade/sonarqube/master/sonarqube-persistent-template.yml --param=SONARQUBE_MEMORY_LIMIT=6Gi
            # fi

            if [ "${DEPLOY_CHE}" == "true" ] ; then
              oc process -f https://raw.githubusercontent.com/minishift/minishift/master/addons/che/templates/che-workspace-service-account.yaml \
                  --param SERVICE_ACCOUNT_NAMESPACE=$CICD_NAMESPACE --param=SERVICE_ACCOUNT_NAME=che-workspace | oc create -f -

              oc process -f https://raw.githubusercontent.com/minishift/minishift/master/addons/che/templates/che-server-template.yaml \
                --param ROUTING_SUFFIX=$HOSTNAME \
                --param CHE_MULTIUSER=false \
                --param CHE_VERSION="6.19.0" \
                --param CHE_INFRA_OPENSHIFT_PROJECT=$CICD_NAMESPACE \
                --param CHE_INFRA_KUBERNETES_SERVICE__ACCOUNT__NAME=che-workspace | oc create -f -

              oc set resources dc/che --limits=cpu=1,memory=2Gi --requests=cpu=200m,memory=512Mi
            fi

            # FIXME: Only deploy nexus if necessary
            # if [ "${EPHEMERAL}" == "true" ] ; then
            #   oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/nexus3-template.yaml --param=NEXUS_VERSION=3.13.0 --param=MAX_MEMORY=2Gi
            # else
            #   oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/nexus3-persistent-template.yaml --param=NEXUS_VERSION=3.13.0 --param=MAX_MEMORY=2Gi
            # fi

            # oc set resources dc/nexus --requests=cpu=200m,memory=1Gi --limits=cpu=2,memory=4Gi 

            GOGS_SVC=$(oc get svc gogs -o template --template='{{.spec.clusterIP}}')
            GOGS_USER=gogs
            GOGS_PWD=gogs

            echo -n "Waiting for gogs to come up..."
            while true; do
              _RETURN=$(curl -o /tmp/curl.log -sL --post302 -w "%{http_code}" http://$GOGS_SVC:3000/user/sign_up \
              --form user_name=$GOGS_USER \
              --form password=$GOGS_PWD \
              --form retype=$GOGS_PWD \
              --form email=admin@gogs.com)
              if [ "$_RETURN" = "200" ] || [ "$_RETURN" = "302" ]; then
                echo "done"
                break
              fi
              if [ "$_RETURN" = "503" ]; then
                oc delete $(oc get po -o name | grep gogs | grep -v gogs-postgresql)
              fi
              echo -n "."
              sleep 5
            done

            sleep 10

            cat <<EOF > /tmp/data.json
            {
              "clone_addr": "https://github.com/hatmarch/spring-framework-petclinic.git",
              "uid": 1,
              "repo_name": "${GOGS_REPO_NAME}"
            }
            EOF

            _RETURN=$(curl -o /tmp/curl.log -sL -w "%{http_code}" -H "Content-Type: application/json" \
            -u $GOGS_USER:$GOGS_PWD -X POST http://$GOGS_SVC:3000/api/v1/repos/migrate -d @/tmp/data.json)

            if [ $_RETURN != "201" ] ;then
              echo "ERROR: Failed to import petclinic GitHub repo: ${GOGS_REPO_NAME}"
              cat /tmp/curl.log
              exit 255
            fi

            sleep 5

            cat <<EOF > /tmp/data.json
            {
              "type": "gogs",
              "config": {
                "url": "https://openshift.default.svc.cluster.local/apis/build.openshift.io/v1/namespaces/$CICD_NAMESPACE/buildconfigs/petclinic-pipeline/webhooks/${WEBHOOK_SECRET}/generic",
                "content_type": "json"
              },
              "events": [
                "push"
              ],
              "active": true
            }
            EOF

            _RETURN=$(curl -o /tmp/curl.log -sL -w "%{http_code}" -H "Content-Type: application/json" \
            -u $GOGS_USER:$GOGS_PWD -X POST http://$GOGS_SVC:3000/api/v1/repos/gogs/${GOGS_REPO_NAME}/hooks -d @/tmp/data.json)

            if [ $_RETURN != "201" ] ; then
              echo "ERROR: Failed to set webhook"
              echo "Contents of payload"
              cat /tmp/curl.log
              exit 255
            fi
          image: openshift/origin:v3.11
          name: cicd-demo-installer-job
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Never